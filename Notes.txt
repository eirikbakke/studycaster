00:13 2010-07-16 (updated 15:23 2010-08-10)
Icon was from the Tango Icon Library:
http://tango.freedesktop.org/Tango_Icon_Library

Original screencasting library (no longer used) was from java-remote-control:
http://code.google.com/p/java-remote-control/wiki/UsingTheScreenRecorder

19:02 2010-07-18 (updated 22:49 2010-07-19, 17:40 2010-07-20)
TODO
* Requires Win32 Access
  * Don't capture other windows than Excel when in foreground
  * Strip user names from saved files.
  * Not useful until the above have been implemented
    * Ask for Excel to be closed prior to screencasting (to avoid capturing other Excel documents).
* Requires $$$
  * Add SSL support
  * Sign JAR
* Ask for permission to screencast
* Dump Java console output to log.
* Have a real progress bar.
* Optimize screencast encoding.
* Don't use a temporary directory that contains the user name in its path.
* Store less IP information (e.g. a shorter hash or a separate file).
* Confirm that application does not hang around in Add/Remove programs

Later
* Java screencast.
* Consider real-time screencast uploading.
* Verify timing of videos.
* Find the double-upload bug.
* Sign the JAR.

Done
V Don't reopen; dangerous.
V Have a confirmation dialog if the window is closed before uploading.
V Fix window positioning for all resolutions.

Considered, decided to make no change:
* Add notice about not having to save the document elsewhere.
* Add notice about possibly closed document.

21:37 2010-07-19
* Renewed logging/screencasting functionality
  * One class queues up stderr/stdout output, mouse pointer movements, log entries, and screenshots.
    These can be queued even before the server has been contacted.
  * Another class intercepts stderr/stdout and the default logger, routing things different places.
  * Another class transmits as soon as the server has been contacted.
  * Philosophy: make the logging entirely independent of the rest, don't require proper shutdown.
* Other notes
  * Might need to send keepalive packets

01:44 2010-07-22
http://msdn.microsoft.com/en-us/library/ff468919%28v=VS.85%29.aspx
http://download.oracle.com/docs/cd/E17476_01/javase/1.4.2/docs/guide/jni/spec/functions.html

20:45 2010-07-28
* Don't use the StreamMuxer after all. It has inconvenient semantics. Instead, have one PostOutputStream for the (untimestamped) console output and
  one for the video/mouse pointer stream.

13:57 2010-08-14 New TODO (supercedes previous, updated continously)
* Rearchitect identification mechanism
  * Send a cookie
  * Generate client ticket on server (and rename it)
  * Consider using a separate ticket for identification
* Include client-side file size limit.
* Retry POST uploads, supply file size to append command to make operations idempotent
* Generate human-readable report
* Make sure the Open/Save locale thing works (see c4ca600... for a bug)
* Give the user the option to open the file him/herself if the association operation fails
* Make sure Excel is closed before the study starts
* Upgrade relevant errors from Level.WARNING to Level.SEVERE.
* Consider using a special preview mode with disabled button or marked upload
  (http://docs.amazonwebservices.com/AWSMechanicalTurkRequester/2008-04-01/ApiReference_ExternalQuestionArticle.html)
* Consider fetching worker ID
  (http://docs.amazonwebservices.com/AWSMechanicalTurkRequester/2008-04-01/ApiReference_ExternalQuestionArticle.html)
* Make tickets numbers (without prepending zeroes) to make them easier to punch and handle with Excel
* Send Java version before Web Start javascript code is executed.
* Future
  * Store experiment info in XML file, get rid of the horrible ExcelLauncher class.
  * Include a configured experiment ID in logged info
  * Log free disk space if below a certain threshold (due to an error seen once)
  * Generalize download, report, and log security
  * Start uploading log immediately, though don't wait for this operation to complete before starting UI.
  * Post-processing of video stream for additional obscurification
  * Sign the JAR
  * Add SSL support
  * Strip user names from saved files (on client side)
  * Don't use a temporary directory that contains the user name in its path
  * Move as much functionality from native library to Java as possible, make improvements
  * Port window detection library to Mac
  * Investigate Chrome issue with window detection library
  * Improve progress bar
  * Avoid users clicking the web start link before accepting the HIT.
  * Opaquify GET link data
  * Avoid sending desktop background
* Absolutely needed for phase two
  * Make it possible to launch a Java app

02:37 2010-08-15
* Identification methods
  * IP address hash
  * Run number
  * JNLP link retrieval number
  * MTurk Worker ID
* Persistence methods
  * Web cookie
  * Temp file
  * JNLP muffin
  * IP address
* Ticket generation opportunities
  * Upon receiving a request for the JNLP file.
  * In JavaScript
* Report structure (for a dashboard page):
  * For each unique IP address

00:08 2010-08-16 New cookie system
* Cookie locations
  * Browser
  * Temp dir
* Cookie types
  * User cookie
* Notes
  * Multiple user cookies may be declared to be synonymous
  * Logs are always appended, never changed
  * Store IP hashes in separate file mapping IP hashes to user cookies
* Actions
  * In PHP script, when generating example launch button:
    * Embed submission of browser/JRE version in JNLP GET URL
  * In PHP script, when request is made for JNLP file:
    if (browser had user cookie)
      current user cookie = browser's user cookie
      if (GET URL had user cookie && GET URL's user cookie != browser's user cookie)
        declare GET URL's user cookie and browser's user cookie synonymous
    else
      if (GET URL had user cookie)
        current user cookie = GET URL's user cookie
      else
        current user cookie = randomly generated cookie
      send current user cookie to browser
    log event including:
      timestamp
      current user cookie
      partial hash of user's IP address (in separate file)
      country and region from GeoIP database
      GET URL's browser/JRE version, if any
      HTTP request's browser type
    embed in JNLP script's GET URL and in a property:
      current user cookie
      server URL
  * In Java application, when executed
    if (user cookie specified in property)
      current user cookie = user cookie from property

    if (temp dir cookie exists) {
      current user cookie = temp dir cookie
      if (user cookie specified in property && temp dir cookie != user cookie specified in property)
        declare cookie specified in property and temp dir cookie synonymous
    } else {
      if (user cookie specified in property)
        current user cookie = user cookie specified in property
      else
        current user cookie = // TODO: Continue from here
    }
