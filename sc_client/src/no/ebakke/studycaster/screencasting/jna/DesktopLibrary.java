package no.ebakke.studycaster.screencasting.jna;

import java.awt.Rectangle;
import java.util.List;

public interface DesktopLibrary {
  /** Return a list of visible windows on the screen, ordered rear-to-front. Windows that are
  partially or completely obscured by other windows may be included despite not being literally
  visible. Do not include the bottom desktop "window", if any. */
  public List<WindowInfo> getWindowList();

  /** Returns the time, in nanoseconds, of the last desktop-level input event, that is, mouse or
  keyboard input from the user. The time base is such that the difference between the return value
  of this method and that of System.nanoTime() will yield a valid interval. */
  public long getLastInputTimeNanos();

  /** Information about a single window on the screen. */
  public static final class WindowInfo {
    private Rectangle bounds;
    private String    title;
    private int       pid;
    private boolean   foreground;

    public WindowInfo(Rectangle bounds, String title, int pid, boolean foreground) {
      this.bounds     = bounds;
      this.title      = title;
      this.pid        = pid;
      this.foreground = foreground;
    }

    /** Returns the bounds of the window, in other words, where on the screen it is located. */
    public Rectangle getBounds() {
      return bounds;
    }

    /** Returns the title of the window. */
    public String getTitle() {
      return title;
    }

    /** Returns an identifier for the process that created this window, for the purposes of
    identifying windows belonging to the same process. The nature of the identifier is not further
    specified; it could be the PID from the operating system, or a simple enumeration generated by
    other means in the OS-specific DestkopLibrary implementation. */
    public int getPID() {
      return pid;
    }

    /** Returns whether the window is the foreground window. The foreground window is the window
    currently owning the user focus, and there is typically one foreground window on the screen at
    any given time (there may be exceptions). */
    public boolean isForeground() {
      return foreground;
    }

    @Override
    public String toString() {
      return pid + "\t" + (foreground ? "F" : " ") + "\t" + bounds + "\t\"" + title + "\"";
    }
  }
}
