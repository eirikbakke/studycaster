package no.ebakke.studycaster.applications;

import java.applet.Applet;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import no.ebakke.studycaster.backend.EnvironmentHooks;
import no.ebakke.studycaster.backend.ServerContext;
import no.ebakke.studycaster.backend.StudyCasterException;
import no.ebakke.studycaster.ui.UIUtil;

// TODO: Make it possible to reopen window if closed.
public class StudyCasterApplet extends Applet {
  private static final Logger LOG = Logger.getLogger("no.ebakke.studycaster");
  private final AtomicBoolean started = new AtomicBoolean();
  // Access from EHT only.
  private StudyCaster studyCaster;

  @Override
  public void init() {
    final EnvironmentHooks hooks = EnvironmentHooks.create();
    LOG.info("Applet init (after hooks created)");

    {
      // TODO: Consider making this less hacky.
      String serverURIProp = getParameter(ServerContext.SERVERURI_PROP_NAME);
      if (serverURIProp != null)
        System.setProperty(ServerContext.SERVERURI_PROP_NAME, serverURIProp);
      String configIDProp = getParameter(StudyCaster.CONFIGID_PROP_NAME);
      if (configIDProp != null)
        System.setProperty(StudyCaster.CONFIGID_PROP_NAME, configIDProp);
    }

    try {
      UIUtil.swingBlock(new UIUtil.CallableExt<Void,RuntimeException>() {
        public Void call() {
          // Must be called before any UI components are rendered.
          try {
            UIUtil.setSystemLookAndFeel();
          } catch (StudyCasterException e) {
            LOG.log(Level.INFO, "Couldn't set system L&F", e);
          }
          initComponents();
          validate();
          studyCaster = new StudyCaster(hooks, false);

          return null;
        }
      });
    } catch (InterruptedException e) {
      LOG.log(Level.SEVERE, "Interrupted while initializing study from applet", e);
    }
  }

  @Override
	public void destroy() {
    LOG.info("Applet destroy");
		super.destroy();
	}

  /* TODO: Make StudyCaster lifecycle interface more suitable for use either with applets or
           applications. */

  @Override
	public void start() {
    LOG.info("Applet start");
    if (started.getAndSet(true))
      return;
    try {
      UIUtil.swingBlock(new UIUtil.CallableExt<Void,RuntimeException>() {
        public Void call() {
          studyCaster.runStudy();
          return null;
        }
      });
    } catch (InterruptedException e) {
      LOG.log(Level.SEVERE, "Interrupted while running study from applet", e);
    }
	}

  @Override
	public void stop() {
    LOG.info("Applet stop");
    try {
      UIUtil.swingBlock(new UIUtil.CallableExt<Void,RuntimeException>() {
        public Void call() {
          if (!studyCaster.isClosed())
            studyCaster.close();
          return null;
        }
      });
    } catch (InterruptedException e) {
      LOG.log(Level.SEVERE, "Interrupted while stopping study from applet", e);
    }
	}

  /**
   * This method is called from within the init() method to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appletLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        appletLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        appletLabel.setText("(StudyCaster is running in a separate window.)");
        add(appletLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appletLabel;
    // End of variables declaration//GEN-END:variables
}
