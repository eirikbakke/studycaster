package no.ebakke.studycaster.ui;

import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

public class ConfirmationCodeDialog extends JDialog {
  private static final Logger LOG = Logger.getLogger("no.ebakke.studycaster");
  private static final long serialVersionUID = 1L;

  // TODO: Get rid of all these variations.
  public static void show(Window parent, String confcode) {
    final ConfirmationCodeDialog ccd;
    if        (parent instanceof Frame) {
      ccd = new ConfirmationCodeDialog((Frame) parent, confcode);
    } else if (parent instanceof Dialog) {
      ccd = new ConfirmationCodeDialog((Dialog) parent, confcode);
    } else if (parent == null) {
      ccd = new ConfirmationCodeDialog(confcode);
    } else {
      throw new IllegalArgumentException();
    }
    ccd.setVisible(true);
    LOG.log(Level.INFO,
        "Now displaying confirmation code dialog with confirmation code {0}", confcode);
  }

  private void init(String confcode) {
    initComponents();
    codeBox.setText(confcode);
    getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
        KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "close");
    getRootPane().getActionMap().put("close", new AbstractAction() {
      private static final long serialVersionUID = 1L;

      public void actionPerformed(ActionEvent e) {
        dispose();
      }
    });
    getRootPane().setDefaultButton(okButton);
    okButton.requestFocusInWindow();

    Dimension sdim = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension wdim = getSize();
    /* Since the dialog will be modal, offset it slightly from the center so it
    will be less likely to cover up other application's dialogs.  */
    setLocation((sdim.width - wdim.width) / 2, (sdim.height - wdim.height) / 2 - 200);
  }

  private ConfirmationCodeDialog(Dialog parent, String confcode) {
    super(parent);
    init(confcode);
  }

  private ConfirmationCodeDialog(Frame parent, String confcode) {
    super(parent);
    init(confcode);
  }

  private ConfirmationCodeDialog(String confcode) {
    super();
    init(confcode);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    label1 = new javax.swing.JLabel();
    codeBox = new javax.swing.JTextField();
    label2 = new javax.swing.JLabel();
    okButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Upload Successful");
    setModal(true);
    setResizable(false);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    label1.setText("Upload successful! Your confirmation code is...");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
    getContentPane().add(label1, gridBagConstraints);

    codeBox.setEditable(false);
    codeBox.setFont(codeBox.getFont().deriveFont(codeBox.getFont().getStyle() | java.awt.Font.BOLD, codeBox.getFont().getSize()+7));
    codeBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    codeBox.setText("1234567890");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    getContentPane().add(codeBox, gridBagConstraints);

    label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    label2.setText("(The code has been copied to the clipboard so you can paste it into the HIT.)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
    getContentPane().add(label2, gridBagConstraints);

    okButton.setMnemonic('O');
    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
    getContentPane().add(okButton, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
      dispose();
    }//GEN-LAST:event_okButtonActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField codeBox;
  private javax.swing.JLabel label1;
  private javax.swing.JLabel label2;
  private javax.swing.JButton okButton;
  // End of variables declaration//GEN-END:variables
}
