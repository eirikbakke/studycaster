package no.ebakke.studycaster.ui;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class StatusFrame extends javax.swing.JFrame {
  private static final Logger LOG = Logger.getLogger("no.ebakke.studycaster");
  private static final long serialVersionUID = 1L;
  private ProgressBarUI pbui;
  private JDialog positionDialog;
  
  public ProgressBarUI getProgressBarUI() {
    return pbui;
  }

  public void setUploadEnabled(boolean enabled) {
    uploadButton.setEnabled(enabled);
  }

  public JButton getUploadButton() {
    return uploadButton;
  }

  public JDialog getPositionDialog() {
    return positionDialog;
  }

  public static void setSystemLookAndFeel() {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (Exception e) {
      LOG.log(Level.WARNING, "Can't set default Look and Feel", e);
    }
  }

  private void initIcon() {
    try {
      Method setIconImagesMethod = null;
      try {
        setIconImagesMethod = Window.class.getMethod("setIconImages", List.class);
      } catch (NoSuchMethodException e) { }
      if (setIconImagesMethod == null) {
        // Running JRE < 1.6
        LOG.info("Can't find Window.setIconImages(), using Frame.setIconImage() " +
            "instead (probably on JRE 1.5 or earlier)");
        setIconImage(ResourceUtil.loadImage("icon256.png", false));
      } else {
        // Running JRE >= 1.6
        List<Image> icons = new ArrayList<Image>();
        icons.add(ResourceUtil.loadImage("icon16.png", false));
        icons.add(ResourceUtil.loadImage("icon22.png", false));
        icons.add(ResourceUtil.loadImage("icon24.png", false));
        icons.add(ResourceUtil.loadImage("icon32.png", false));
        icons.add(ResourceUtil.loadImage("icon48.png", false));
        icons.add(ResourceUtil.loadImage("icon64.png", false));
        icons.add(ResourceUtil.loadImage("icon128.png", false));
        icons.add(ResourceUtil.loadImage("icon256.png", false));
        try {
          setIconImagesMethod.invoke(this, icons);
        } catch (IllegalAccessException e) {
          LOG.log(Level.WARNING, "Unexpected error while invoking Window.setIconImages()", e);
        } catch (InvocationTargetException e) {
          LOG.log(Level.WARNING, "Got unexpected exception from Window.setIconImages()", e);
        }
      }
    } catch (Exception e) {
      LOG.log(Level.WARNING, "Failed to configure window icon", e);
    }
  }

  public void setInstructions(String instructions) {
    instructionLabel.setText(instructions);
    updateSizeAndLocation();
  }

  private void updateSizeAndLocation() {
    pack();
    /* The following incantations were carefully derived through experimentation to work well with
    a variety of screen resultions and window sizes. */
    Dimension sdim = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension wdim = getSize();
    final int XMARGIN_MIN = 40;
    final int YMARGIN_MIN = 110;
    int xmargin = (int) (sdim.width  * 0.14) - wdim.width  / 2;
    int ymargin = (int) (sdim.height * 0.22) - wdim.height / 2;
    xmargin = Math.max(XMARGIN_MIN, xmargin);
    ymargin = Math.max(YMARGIN_MIN, ymargin);
    setLocation(sdim.width - wdim.width - xmargin, sdim.height - wdim.height - ymargin);
  }

  public StatusFrame() {
    positionDialog = new JDialog(this);
    initComponents();
    // TODO: Remove.
    actionButtonPanel.setLayout(new java.awt.GridLayout(1, 1));
    actionButtonPanel.remove(openButton);

    pbui = new ProgressBarUI(progressBar);
    //progressBar.setIndeterminate(true);
    updateSizeAndLocation();

    this.initIcon();

    addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosing(WindowEvent e) {
        LOG.info("User tried to close main StudyCaster window");
        int decision = JOptionPane.showConfirmDialog(getPositionDialog(),
          "If you exit the StudyCaster client without uploading first, your changes will be lost.",
          "Exit Without Uploading?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (decision == JOptionPane.OK_OPTION) {
          LOG.info("User confirmed closing of main StudyCaster window");
          dispose();
        } else {
          LOG.info("User canceled closing of main StudyCaster window");
        }
      }
    });
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        instructionLabel = new javax.swing.JLabel();
        actionButtonPanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        navigationPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("StudyCaster Client");
        setAlwaysOnTop(true);
        setName("statusFrame"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        instructionLabel.setText("Please wait...");
        instructionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        getContentPane().add(instructionLabel, gridBagConstraints);

        actionButtonPanel.setLayout(new java.awt.GridLayout(2, 1));

        openButton.setMnemonic('O');
        openButton.setText("Open Sample Document...");
        actionButtonPanel.add(openButton);

        uploadButton.setMnemonic('U');
        uploadButton.setText("Upload and Retrieve Confirmation Code...");
        uploadButton.setEnabled(false);
        actionButtonPanel.add(uploadButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        getContentPane().add(actionButtonPanel, gridBagConstraints);

        navigationPanel.setLayout(new java.awt.GridLayout(1, 0));

        backButton.setMnemonic('B');
        backButton.setText("< Back");
        backButton.setEnabled(false);
        navigationPanel.add(backButton);

        nextButton.setMnemonic('N');
        nextButton.setText("Next >");
        nextButton.setEnabled(false);
        navigationPanel.add(nextButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        getContentPane().add(navigationPanel, gridBagConstraints);

        progressBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        progressBar.setString("");
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        getContentPane().add(progressBar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionButtonPanel;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JPanel navigationPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton openButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
