<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="sc_server" default="default" basedir=".">
    <description>Builds, tests, and runs the StudyCaster server.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->

    <target name="-pre-compile">
        <fail unless="dist.prod.war"           >Must set dist.prod.war</fail>
        <fail unless="studycaster.jdbc.url"    >Must set studycaster.jdbc.url</fail>
        <fail unless="studycaster.storage.path">Must set studycaster.storage.path</fail>

        <!-- Since the client JWS distro takes a while to build, don't bother
        doing it automatically every time we rebuild the server. Instead, give
        a nice error message here if the client hasn't been built yet. -->
        <!-- Detect unbuilt client using a file that's unlikely to be left over
        after a partially failed clean (e.g. due to locked files that cannot be
        removed). -->
        <available file="${project.sc_client}/dist/launch.jnlp" property="clientIsBuilt" />
        <fail unless="clientIsBuilt" message=
            "Can't build the server yet; please build the sc_client project before sc_server."/>

        <!-- Add these as a build customization rather than as file references
        in the project properties, as the latter would get confused and give a
        "broken reference" message whenever the client project was cleaned.
        Also, this lets us rename the generated JNLP file, which is actually a
        JSPX file. -->
        <copyfiles files="${project.sc_client}/dist/lib" todir="${build.web.dir}/client/lib"/>
        <copy file="${project.sc_client}/dist/launch.jnlp" tofile="${build.web.dir}/WEB-INF/generatedJNLP.jspx"/>
        <unzip src="${libs.sc-resources.classpath}" dest="${build.web.dir}/client/icons">
            <patternset>
                <include name="/no/ebakke/studycaster/resources/icon*.png"/>
                <include name="/no/ebakke/studycaster/resources/icon.svg"/>
            </patternset>
            <mapper type="flatten"/>
        </unzip>

        <echo message="Using development database '${studycaster.jdbc.url}' (studycaster.jdbc.url)"/>
        <echo message="Using development storage directory '${studycaster.storage.path}' (sc_devel.storage.path)"/>
        <echo message="You can override these settings in nbproject/private/private.properties"/>

        <property name="studycaster.storage.path.abs" location="${studycaster.storage.path}"/>
        <propertyfile file="${build.classes.dir}/development.properties">
          <entry key="JDBC_CONNECTION_STRING" value="${studycaster.jdbc.url}"/>
          <entry key="PARAM1"                 value="${studycaster.storage.path.abs}"/>
        </propertyfile>
    </target>

    <!-- Create a production version of the WAR file that excludes the default
    hibernate configuration as well as the default context.xml file. The default
    generated WAR is still needed for local deployment during development. -->
    <target name="-post-dist">
        <!-- See http://stackoverflow.com/questions/2025950/ant-how-to-strip-the-basedir-from-an-absolute-path-to-get-a-relative-path -->
        <property name="hiberdevel.prop.path"
            location="${build.classes.dir}/development.properties"
            basedir="${build.web.dir}" relative="yes" />
        <!-- See http://stackoverflow.com/questions/2521231/ant-task-to-remove-files-from-a-jar . -->
        <jar destfile="${dist.prod.war}">
            <zipfileset src="${dist.war}">
                <exclude name="${hiberdevel.prop.path}" />
                <exclude name="META-INF/context.xml"     />
            </zipfileset>
        </jar>
    </target>
</project>
